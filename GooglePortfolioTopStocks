import requests as r
from bs4 import BeautifulSoup
from dataclasses import dataclass
from tabulate import tabulate

quantityintc = input("How many INTC?", )
quantitymu = input("How many MU?", )
quantitymeta = input("How many META?", )
quantitycna = input("How many CNA?", )
quantityvod = input("How many VOD?", )

@dataclass
class Stock:
    ticker: str
    exchange: str
    price: float = 0
    currency: str = "GBP"
    gbp_price: float = 0

    def __post_init__(self):
        price_info = get_price_information(self.ticker, self.exchange)

        if price_info["ticker"] == self.ticker:
            self.price = price_info["price"]
            self.currency = price_info["currency"]
            self.gbp_price = price_info["GBP price"]

@dataclass
class Position:
    stock: Stock
    quantity: int

@dataclass
class Portfolio:
    positions: list[Position]

    def get_total_value(self):
        total_value = sum(position.stock.gbp_price * position.quantity for position in self.positions)
        return total_value


def fx_usd_to_gbp(currency):
    fx_url = f"https://www.google.com/finance/quote/{currency}-GBP"
    resp = r.get(fx_url)
    soup = BeautifulSoup(resp.content, "html.parser")
    fx_rate = soup.find("div", {"data-last-price": True})
    if fx_rate is None:
        return None
    fx = float(fx_rate["data-last-price"])
    return fx

def get_price_information(ticker, exchange):
    url = f"https://www.google.com/finance/quote/{ticker}:{exchange}"
    resp = r.get(url)
    soup = BeautifulSoup(resp.content, "html.parser")
    price_div = soup.find("div", attrs={"data-last-price": True})
    price = float(price_div["data-last-price"])
    currency = price_div["data-currency-code"]

    gbp_price = price
    if currency == "USD":
        fx = fx_usd_to_gbp(currency)
        gbp_price = round(price * fx, 2)
    elif currency == "GBX":
            gbp_price = round(price * 100, 2)

    return {
        "ticker": ticker,
        "exchange": exchange,
        "price": price,
        "currency": currency,
        "GBP price": gbp_price
    }

def display_portfolio_summary(portfolio):
    if not isinstance(portfolio, Portfolio):
        raise TypeError("Please provide instance of portfolio type")

    portfolio_value = portfolio.get_total_value()

    position_data = []
    
    for position in sorted(portfolio.positions,
                           key = lambda x: x.quantity * x.stock.gbp_price,
                           reverse= True
                           ):
        position_data.append([
            position.stock.ticker,
            position.stock.exchange,
            position.quantity,
            position.stock.gbp_price,
            position.quantity * position.stock.gbp_price,
            position.quantity * position.stock.gbp_price / portfolio_value * 100
        ])

    print(tabulate(position_data,
                   headers = ["Ticker", "Exchange", "Quantity", "GBP Price", "Market Value", "% Allocation"],
                   tablefmt = "fancy_grid",
                   floatfmt = ".2f"
                   ))

    print(f"Total Portfolio Value: Â£{portfolio_value:,.2f}")

if __name__ == "__main__":
    intc = Stock("INTC", "NASDAQ")
    mu = Stock("MU", "NASDAQ")
    meta = Stock("META", "NASDAQ")
    cna = Stock("CNA", "LON")
    vod = Stock("VOD", "LON")

    portfolio = Portfolio([Position(intc, int(quantityintc)), Position(mu, int(quantitymu)), Position(meta, int(quantitymeta)), Position(cna, int(quantitycna)), Position(vod, int(quantityvod))])

    display_portfolio_summary(portfolio)
